
アプリケーションが必要とする、あらゆる値、関数、機能を含む幅広いカテゴリー
通常目的が明確な小規模のクラス
特定の作業を行い、適切に処理をする

Angularではサービスとコンポーネントを区別し、モジュールの再利用性を高める
コンポーネントではViewを管理する以上のことをしない
サーバからデータを取得したり、入力値をチェックしたり、コンソールにログを吐いたり、
そういったタスクはサービス側（ないしパイプや他の仕組み）が請け負う
例）
export class Logger {
  log(msg: any)   { console.log(msg); }
  error(msg: any) { console.error(msg); }
  warn(msg: any)  { console.warn(msg); }
}

○　DI
サービスをコンポーネントに注入し、サービスへのアクセス権をコンポーネントに与える
クラスをサービスとして定義するためには、@Injectableデコレータを使用する
Angularが依存関係としてコンポーネントにサービスを注入するためのメタデータと、
同様に他のサービスやクラスが依存関係をもっていることを示すのに使う

Angularはbootstrap中にアプリケーション全体のインジェクタを作成し、
可能であれば再利用する依存関係インスタンスのコンテナを保持する
プロバイダはインジェクタに依存性を取得、又は作成する方法を伝えるオブジェクト
アプリにおいて依存関係が必要な場合、アプリのインジェクタにプロバイダを登録し、
プロバイダを使用して新しいインスタンスを作成する
サービスに限った話ではない

Angularではコンポーネント生成時にコンストラクタに定義されているパラメータを調べることで、
コンポーネントが必要としている依存関係を注入する

○　サービスの提供
サービスに対してプロバイダを少なくとも1つ登録する必要がある
プロバイダはサービス自体のメタデータになり、そのサービスの利用範囲を決める

・ルートレベルでのサービス提供
@Injectable({
 providedIn: 'root',
})
デフォルト
共有インスタンスを一つ作り、それを必要としているコンポーネントに割り当てる

・モジュールレベルでのサービス提供
@NgModule({
  providers: [
  BackendService,
  Logger
 ],
 ...
})
特定のNgModuleにサービスを登録すると、そのモジュール内のコンポーネントから、
同じサービスのインスタンスを使用できる

・コンポーネントレベルのサービス提供
@Component({
  selector:    'app-hero-list',
  templateUrl: './hero-list.component.html',
  providers:  [ HeroService ]
})
コンポーネントレベルでプロバイダ登録すると、コンポーネントの新しいインスタンスを作るたびに、
サービスの新しいインスタンスを作成する


